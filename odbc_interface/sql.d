/*
 *  Copyright (C) 1995 by Ke Jin <kejin@empress.com>
 *  Copyright (C) 1996-2014 by OpenLink Software <iodbc@openlinksw.com>
 *  All Rights Reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *  3. Neither the name of OpenLink Software Inc. nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL OPENLINK OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
module odbc_interface.sql;

public import odbc_interface.sqltypes;

enum StatusCode : wstring {
    GENERAL_WARNING = "01000"w,
    GENERAL_ERROR = "HY000"w,
    OPTIONAL_FEATURE = "HYC00"w,
    MODIFIED_USER_VALUE = "01S02"w,
}

///Useful Constants
enum SQL_MAX_MESSAGE_LENGTH = 512;

//Handle types
enum SQL_HANDLE_TYPE : SQLSMALLINT {
    ENV = 1,
    DBC,
    STMT,
    DESC,
    SENV,
}

//Function return codes
enum SQLRETURN SQL_SUCCESS = 0;
enum SQLRETURN SQL_SUCCESS_WITH_INFO = 1;
enum SQLRETURN SQL_STILL_EXECUTING = 2;
enum SQLRETURN SQL_ERROR = -1;
enum SQLRETURN SQL_INVALID_HANDLE = -2;
enum SQLRETURN SQL_NEED_DATA = 99;
enum SQLRETURN SQL_NO_DATA = 100;
enum SQLRETURN SQL_NO_DATA_FOUND = SQL_NO_DATA;
enum SQL_NO_TOTAL = -4; //SQLGetData


//Test for SQL_SUCCESS or SQL_SUCCESS_WITH_INFO
bool SQL_SUCCEEDED(int rc) {
    return ((rc)&(~1)) == 0;
}

//Special length values
enum SQL_NULL_DATA = -1;
enum SQL_DATA_AT_EXEC = -2;

//Flags for null-terminated strings
enum SQL_NTS = -3;
enum SQL_NTSL = -3;


//SQL datatypes, using ANSI type numbering
enum SQL_TYPE_ID : SQLSMALLINT {
    SQL_UNKNOWN_TYPE = 0,
    SQL_CHAR = 1,
    SQL_NUMERIC = 2,
    SQL_DECIMAL = 3,
    SQL_INTEGER = 4,
    SQL_SMALLINT = 5,
    SQL_FLOAT = 6,
    SQL_REAL = 7,
    SQL_DOUBLE = 8,
    SQL_DATETIME = 9,
    SQL_VARCHAR = 12,
    SQL_DATE = 9,
    SQL_INTERVAL = 10,
    SQL_TIME = 10,
    SQL_TIMESTAMP = 11,
    SQL_LONGVARCHAR = -1,
    SQL_BINARY = -2,
    SQL_VARBINARY = -3,
    SQL_LONGVARBINARY = -4,
    SQL_BIGINT = -5,
    SQL_TINYINT = -6,
    SQL_BIT = -7,
    SQL_WCHAR = -8,
    SQL_WVARCHAR = -9,
    SQL_WLONGVARCHAR = -10,
    SQL_GUID = -11,
    SQL_INTERVAL_YEAR = 100 + IntervalCode.YEAR,
    SQL_INTERVAL_MONTH = 100 + IntervalCode.MONTH,
    SQL_INTERVAL_DAY = 100 + IntervalCode.DAY,
    SQL_INTERVAL_HOUR = 100 + IntervalCode.HOUR,
    SQL_INTERVAL_MINUTE = 100 + IntervalCode.MINUTE,
    SQL_INTERVAL_SECOND = 100 + IntervalCode.SECOND,
    SQL_INTERVAL_YEAR_TO_MONTH = 100 + IntervalCode.YEAR_TO_MONTH,
    SQL_INTERVAL_DAY_TO_HOUR = 100 + IntervalCode.DAY_TO_HOUR,
    SQL_INTERVAL_DAY_TO_MINUTE = 100 + IntervalCode.DAY_TO_MINUTE,
    SQL_INTERVAL_DAY_TO_SECOND = 100 + IntervalCode.DAY_TO_SECOND,
    SQL_INTERVAL_HOUR_TO_MINUTE = 100 + IntervalCode.HOUR_TO_MINUTE,
    SQL_INTERVAL_HOUR_TO_SECOND = 100 + IntervalCode.HOUR_TO_SECOND,
    SQL_INTERVAL_MINUTE_TO_SECOND = 100 + IntervalCode.MINUTE_TO_SECOND,

    //Statement attribute values for date/time data types
    SQL_TYPE_DATE = 91,
    SQL_TYPE_TIME = 92,
    SQL_TYPE_TIMESTAMP = 93,
}

//SQLGetDescField - SQL_DESC_DATETIME_INTERVAL_CODE
enum DateTimeCode : SQLSMALLINT {
    DATE = 1,
    TIME,
    TIMESTAMP
}

enum DateTimeCode[SQL_TYPE_ID] dateTimeCodeMap = [
    SQL_TYPE_ID.SQL_DATE : DateTimeCode.DATE,
    SQL_TYPE_ID.SQL_TIME : DateTimeCode.TIME,
    SQL_TYPE_ID.SQL_TIMESTAMP : DateTimeCode.TIMESTAMP,
];

//Internal type subcodes
enum IntervalCode : SQLSMALLINT {
    YEAR = 1,
    MONTH,
    DAY,
    HOUR,
    MINUTE,
    SECOND,
    YEAR_TO_MONTH,
    DAY_TO_HOUR,
    DAY_TO_MINUTE,
    DAY_TO_SECOND,
    HOUR_TO_MINUTE,
    HOUR_TO_SECOND,
    MINUTE_TO_SECOND
}

enum IntervalCode[SQL_TYPE_ID] intervalCodeMap = [
    SQL_TYPE_ID.SQL_INTERVAL_YEAR : IntervalCode.YEAR,
    SQL_TYPE_ID.SQL_INTERVAL_MONTH : IntervalCode.MONTH,
    SQL_TYPE_ID.SQL_INTERVAL_DAY : IntervalCode.DAY,
    SQL_TYPE_ID.SQL_INTERVAL_HOUR : IntervalCode.HOUR,
    SQL_TYPE_ID.SQL_INTERVAL_MINUTE : IntervalCode.MINUTE,
    SQL_TYPE_ID.SQL_INTERVAL_SECOND : IntervalCode.SECOND,
    SQL_TYPE_ID.SQL_INTERVAL_YEAR_TO_MONTH : IntervalCode.YEAR_TO_MONTH,
    SQL_TYPE_ID.SQL_INTERVAL_DAY_TO_HOUR : IntervalCode.DAY_TO_HOUR,
    SQL_TYPE_ID.SQL_INTERVAL_DAY_TO_MINUTE : IntervalCode.DAY_TO_MINUTE,
    SQL_TYPE_ID.SQL_INTERVAL_DAY_TO_SECOND : IntervalCode.DAY_TO_SECOND,
    SQL_TYPE_ID.SQL_INTERVAL_HOUR_TO_MINUTE : IntervalCode.HOUR_TO_MINUTE,
    SQL_TYPE_ID.SQL_INTERVAL_HOUR_TO_SECOND : IntervalCode.HOUR_TO_SECOND,
    SQL_TYPE_ID.SQL_INTERVAL_MINUTE_TO_SECOND : IntervalCode.MINUTE_TO_SECOND
];

// GetTypeInfo request for all data types
enum SQL_ALL_TYPES = 0;

//Date/time length constants
enum SQL_DATE_LEN  = 10;
enum SQL_TIME_LEN = 8; //Add P+1 if precision > 0
enum SQL_TIMESTAMP_LEN = 19;  //Add P+1 if precision is > 0

enum Nullability : SQLSMALLINT {
    SQL_NO_NULLS = 0,
    SQL_NULLABLE = 1,
    SQL_NULLABLE_UNKNOWN = 2 //The "not sure" value
}

enum SQL_NULL_HENV = 0L;
enum SQL_NULL_HDBC = 0L;
enum SQL_NULL_HSTMT = 0L;
enum SQL_NULL_HDESC = 0L;
enum SQL_NULL_HANDLE = 0L; //Parent argument to SQLAllocHandle when allocating a SQLHENV

//CLI option values
enum SQL_FALSE = 0;
enum SQL_TRUE = 1;

// Default conversion code for SQLBindCol(), SQLBindParam() and SQLGetData()
enum SQL_DEFAULT = 99;

//SQLFetchScroll - FetchOrientation
enum FetchType : SQLSMALLINT {
    //Codes also used in SQLDataSources
    SQL_FETCH_NEXT = 1,
    SQL_FETCH_FIRST,

    SQL_FETCH_LAST,
    SQL_FETCH_PRIOR,
    SQL_FETCH_ABSOLUTE,
    SQL_FETCH_RELATIVE,
    SQL_FETCH_BOOKMARK
}

enum FreeStmtOptions : SQLUSMALLINT {
    SQL_CLOSE = 0,
    SQL_DROP,
    SQL_UNBIND,
    SQL_RESET_PARAMS
}

//GetData() code indicating that the application row descriptor specifies the data type
enum SQL_ARD_TYPE = -99;

//SQLGetDescField - SQL_DESC_ALLOC_TYPE
enum SQL_DESC_ALLOC_AUTO = 1;
enum SQL_DESC_ALLOC_USER = 2;

//SQLGetDescField - SQL_DESC_UNNAMED
enum SQL_NAMED = 0;
enum SQL_UNNAMED = 1;

//SQLGetDiagField - identifiers of fields in the diagnostics area
enum SQL_DIAG_RETURNCODE = 1;
enum SQL_DIAG_NUMBER = 2;
enum SQL_DIAG_ROW_COUNT = 3;
enum SQL_DIAG_SQLSTATE = 4;
enum SQL_DIAG_NATIVE = 5;
enum SQL_DIAG_MESSAGE_TEXT = 6;
enum SQL_DIAG_DYNAMIC_FUNCTION = 7;
enum SQL_DIAG_CLASS_ORIGIN = 8;
enum SQL_DIAG_SUBCLASS_ORIGIN = 9;
enum SQL_DIAG_CONNECTION_NAME = 10;
enum SQL_DIAG_SERVER_NAME = 11;
enum SQL_DIAG_DYNAMIC_FUNCTION_CODE = 12;

//SQLGetDiagField - SQL_DIAG_DYNAMIC_FUNCTION_CODE
enum SQL_DIAG_ALTER_DOMAIN = 3;
enum SQL_DIAG_ALTER_TABLE = 4;
enum SQL_DIAG_CALL = 7;
enum SQL_DIAG_CREATE_ASSERTION = 6;
enum SQL_DIAG_CREATE_CHARACTER_SET = 8;
enum SQL_DIAG_CREATE_COLLATION = 10;
enum SQL_DIAG_CREATE_DOMAIN = 23;
enum SQL_DIAG_CREATE_INDEX = -1;
enum SQL_DIAG_CREATE_SCHEMA = 64;
enum SQL_DIAG_CREATE_TABLE = 77;
enum SQL_DIAG_CREATE_TRANSLATION = 79;
enum SQL_DIAG_CREATE_VIEW = 84;
enum SQL_DIAG_DELETE_WHERE = 19;
enum SQL_DIAG_DROP_ASSERTION = 24;
enum SQL_DIAG_DROP_CHARACTER_SET = 25;
enum SQL_DIAG_DROP_COLLATION = 26;
enum SQL_DIAG_DROP_DOMAIN = 27;
enum SQL_DIAG_DROP_INDEX = -2;
enum SQL_DIAG_DROP_SCHEMA = 31;
enum SQL_DIAG_DROP_TABLE = 32;
enum SQL_DIAG_DROP_TRANSLATION = 33;
enum SQL_DIAG_DROP_VIEW = 36;
enum SQL_DIAG_DYNAMIC_DELETE_CURSOR = 38;
enum SQL_DIAG_DYNAMIC_UPDATE_CURSOR = 81;
enum SQL_DIAG_GRANT = 48;
enum SQL_DIAG_INSERT = 50;
enum SQL_DIAG_REVOKE = 59;
enum SQL_DIAG_SELECT_CURSOR = 85;
enum SQL_DIAG_UNKNOWN_STATEMENT = 0;
enum SQL_DIAG_UPDATE_WHERE = 82;

//SQLGetEnvAttr - environment attribute
enum EnvironmentAttribute : SQLINTEGER {
    SQL_ATTR_OUTPUT_NTS = 10001,
    SQL_ATTR_ODBC_VERSION = 200,
    SQL_ATTR_CONNECTION_POOLING = 201,
    SQL_ATTR_CP_MATCH = 202
}

//SQLGetDiagField - SQL_DIAG_DYNAMIC_FUNCTION_CODE
enum SQL_API_SQLALLOCCONNECT = 1;
enum SQL_API_SQLALLOCENV = 2;
enum SQL_API_SQLALLOCHANDLE = 1001;
enum SQL_API_SQLALLOCSTMT = 3;
enum SQL_API_SQLBINDCOL = 4;
enum SQL_API_SQLBINDPARAM = 1002;
enum SQL_API_SQLCANCEL = 5;
enum SQL_API_SQLCLOSECURSOR = 1003;
enum SQL_API_SQLCOLATTRIBUTE = 6;
enum SQL_API_SQLCOLUMNS = 40;
enum SQL_API_SQLCONNECT = 7;
enum SQL_API_SQLCOPYDESC = 1004;
enum SQL_API_SQLDATASOURCES = 57;
enum SQL_API_SQLDESCRIBECOL = 8;
enum SQL_API_SQLDISCONNECT = 9;
enum SQL_API_SQLENDTRAN = 1005;
enum SQL_API_SQLERROR = 10;
enum SQL_API_SQLEXECDIRECT = 11;
enum SQL_API_SQLEXECUTE = 12;
enum SQL_API_SQLFETCH = 13;
enum SQL_API_SQLFETCHSCROLL = 1021;
enum SQL_API_SQLFREECONNECT = 14;
enum SQL_API_SQLFREEENV = 15;
enum SQL_API_SQLFREEHANDLE = 1006;
enum SQL_API_SQLFREESTMT = 16;
enum SQL_API_SQLGETCONNECTATTR = 1007;
enum SQL_API_SQLGETCONNECTOPTION = 42;
enum SQL_API_SQLGETCURSORNAME = 17;
enum SQL_API_SQLGETDATA = 43;
enum SQL_API_SQLGETDESCFIELD = 1008;
enum SQL_API_SQLGETDESCREC = 1009;
enum SQL_API_SQLGETDIAGFIELD = 1010;
enum SQL_API_SQLGETDIAGREC = 1011;
enum SQL_API_SQLGETENVATTR = 1012;
enum SQL_API_SQLGETFUNCTIONS = 44;
enum SQL_API_SQLGETINFO = 45;
enum SQL_API_SQLGETSTMTATTR = 1014;
enum SQL_API_SQLGETSTMTOPTION = 46;
enum SQL_API_SQLGETTYPEINFO = 47;
enum SQL_API_SQLNUMRESULTCOLS = 18;
enum SQL_API_SQLPARAMDATA = 48;
enum SQL_API_SQLPREPARE = 19;
enum SQL_API_SQLPUTDATA = 49;
enum SQL_API_SQLROWCOUNT = 20;
enum SQL_API_SQLSETCONNECTATTR = 1016;
enum SQL_API_SQLSETCONNECTOPTION = 50;
enum SQL_API_SQLSETCURSORNAME = 21;
enum SQL_API_SQLSETDESCFIELD = 1017;
enum SQL_API_SQLSETDESCREC = 1018;
enum SQL_API_SQLSETENVATTR = 1019;
enum SQL_API_SQLSETPARAM = 22;
enum SQL_API_SQLSETSTMTATTR = 1020;
enum SQL_API_SQLSETSTMTOPTION = 51;
enum SQL_API_SQLSPECIALCOLUMNS = 52;
enum SQL_API_SQLSTATISTICS = 53;
enum SQL_API_SQLTABLES = 54;
enum SQL_API_SQLTRANSACT = 23;
enum SQL_API_SQLCANCELHANDLE = 1550;
enum SQL_API_SQLCOMPLETEASYNC = 1551;

//Information requested by SQLGetInfo()
enum OdbcInfo : SQLUSMALLINT {
    SQL_MAX_DRIVER_CONNECTIONS = 0,
    SQL_MAXIMUM_DRIVER_CONNECTIONS = SQL_MAX_DRIVER_CONNECTIONS,
    SQL_INFO_FIRST = 0,
    SQL_ACTIVE_CONNECTIONS = 0,
    SQL_ACTIVE_STATEMENTS = 1,
    SQL_MAX_CONCURRENT_ACTIVITIES = 1,
    SQL_MAXIMUM_CONCURRENT_ACTIVITIES = SQL_MAX_CONCURRENT_ACTIVITIES,
    SQL_DATA_SOURCE_NAME = 2,
    SQL_DRIVER_HDBC = 3,
    SQL_DRIVER_HENV = 4,
    SQL_DRIVER_HSTMT = 5,
    SQL_DRIVER_NAME = 6,
    SQL_DRIVER_VER = 7,
    SQL_FETCH_DIRECTION = 8,
    SQL_ODBC_API_CONFORMANCE = 9,
    SQL_ODBC_VER = 10,
    SQL_ROW_UPDATES = 11,
    SQL_ODBC_SAG_CLI_CONFORMANCE = 12,
    SQL_SERVER_NAME = 13,
    SQL_SEARCH_PATTERN_ESCAPE = 14,
    SQL_ODBC_SQL_CONFORMANCE = 15,
    SQL_DATABASE_NAME = 16,
    SQL_DBMS_NAME = 17,
    SQL_DBMS_VER = 18,
    SQL_ACCESSIBLE_TABLES = 19,
    SQL_ACCESSIBLE_PROCEDURES = 20,
    SQL_PROCEDURES = 21,
    SQL_CONCAT_NULL_BEHAVIOR = 22,
    SQL_CURSOR_COMMIT_BEHAVIOR = 23,
    SQL_CURSOR_ROLLBACK_BEHAVIOR = 24,
    SQL_DATA_SOURCE_READ_ONLY = 25,
    SQL_DEFAULT_TXN_ISOLATION = 26,
    SQL_EXPRESSIONS_IN_ORDERBY = 27,
    SQL_IDENTIFIER_CASE = 28,
    SQL_IDENTIFIER_QUOTE_CHAR = 29,
    SQL_MAX_COLUMN_NAME_LEN = 30,
    SQL_MAXIMUM_COLUMN_NAME_LENGTH = SQL_MAX_COLUMN_NAME_LEN,
    SQL_MAX_CURSOR_NAME_LEN = 31,
    SQL_MAXIMUM_CURSOR_NAME_LENGTH = SQL_MAX_CURSOR_NAME_LEN,
    SQL_MAX_OWNER_NAME_LEN = 32, //Owner means schema
    SQL_MAXIMUM_OWNER_NAME_LENGTH = SQL_MAX_OWNER_NAME_LEN,
    SQL_MAX_PROCEDURE_NAME_LEN = 33,
    SQL_MAXIMUM_PROCEDURE_NAME_LENGTH = SQL_MAX_PROCEDURE_NAME_LEN,
    SQL_MAX_QUALIFIER_NAME_LEN = 34,  //Qualifier means catalog
    SQL_MAXIMUM_QUALIFIER_NAME_LENGTH = SQL_MAX_QUALIFIER_NAME_LEN,
    SQL_MAX_SCHEMA_NAME_LEN = 32,
    SQL_MAXIMUM_SCHEMA_NAME_LENGTH = SQL_MAX_SCHEMA_NAME_LEN,
    SQL_MAX_CATALOG_NAME_LEN = 34,
    SQL_MAXIMUM_CATALOG_NAME_LENGTH = SQL_MAX_CATALOG_NAME_LEN,
    SQL_MAX_TABLE_NAME_LEN = 35,
    SQL_MAXIMUM_TABLE_NAME_LENGTH = SQL_MAX_TABLE_NAME_LEN,
    SQL_MULT_RESULT_SETS = 36,
    SQL_MULTIPLE_ACTIVE_TXN = 37,
    SQL_OUTER_JOINS = 38,
    SQL_OWNER_TERM = 39,
    SQL_PROCEDURE_TERM = 40,
    SQL_QUALIFIER_NAME_SEPARATOR = 41,
    SQL_QUALIFIER_TERM = 42,
    SQL_SCROLL_CONCURRENCY = 43,
    SQL_SCROLL_OPTIONS = 44,
    SQL_TABLE_TERM = 45,
    SQL_TXN_CAPABLE = 46,
    SQL_TRANSACTION_CAPABLE = SQL_TXN_CAPABLE,
    SQL_USER_NAME = 47,
    SQL_CONVERT_FUNCTIONS = 48,
    SQL_NUMERIC_FUNCTIONS = 49,
    SQL_STRING_FUNCTIONS = 50,
    SQL_SYSTEM_FUNCTIONS = 51,
    SQL_TIMEDATE_FUNCTIONS = 52,
    SQL_CONVERT_BIGINT = 53,
    SQL_CONVERT_BINARY = 54,
    SQL_CONVERT_BIT = 55,
    SQL_CONVERT_CHAR = 56,
    SQL_CONVERT_DATE = 57,
    SQL_CONVERT_DECIMAL = 58,
    SQL_CONVERT_DOUBLE = 59,
    SQL_CONVERT_FLOAT = 60,
    SQL_CONVERT_INTEGER = 61,
    SQL_CONVERT_LONGVARCHAR = 62,
    SQL_CONVERT_NUMERIC = 63,
    SQL_CONVERT_REAL = 64,
    SQL_CONVERT_SMALLINT = 65,
    SQL_CONVERT_TIME = 66,
    SQL_CONVERT_TIMESTAMP = 67,
    SQL_CONVERT_TINYINT = 68,
    SQL_CONVERT_VARBINARY = 69,
    SQL_CONVERT_VARCHAR = 70,
    SQL_CONVERT_LONGVARBINARY = 71,
    SQL_TXN_ISOLATION_OPTION = 72,
    SQL_TRANSACTION_ISOLATION_OPTION = SQL_TXN_ISOLATION_OPTION,
    SQL_INTEGRITY = 73,
    SQL_ODBC_SQL_OPT_IEF = 73,
    SQL_CORRELATION_NAME = 74,
    SQL_NON_NULLABLE_COLUMNS = 75,
    SQL_DRIVER_HLIB = 76,
    SQL_DRIVER_ODBC_VER = 77,
    SQL_LOCK_TYPES = 78,
    SQL_POS_OPERATIONS = 79,
    SQL_POSITIONED_STATEMENTS = 80,
    SQL_GETDATA_EXTENSIONS = 81,
    SQL_BOOKMARK_PERSISTENCE = 82,
    SQL_STATIC_SENSITIVITY = 83,
    SQL_FILE_USAGE = 84,
    SQL_NULL_COLLATION = 85,
    SQL_ALTER_TABLE = 86,
    SQL_COLUMN_ALIAS = 87,
    SQL_GROUP_BY = 88,
    SQL_KEYWORDS = 89,
    SQL_ORDER_BY_COLUMNS_IN_SELECT = 90,
    SQL_OWNER_USAGE = 91,
    SQL_QUALIFIER_USAGE = 92,
    SQL_QUOTED_IDENTIFIER_CASE = 93,
    SQL_SPECIAL_CHARACTERS = 94,
    SQL_SUBQUERIES = 95,
    SQL_UNION = 96,
    SQL_MAX_COLUMNS_IN_GROUP_BY = 97,
    SQL_MAXIMUM_COLUMNS_IN_GROUP_BY = SQL_MAX_COLUMNS_IN_GROUP_BY,
    SQL_MAX_COLUMNS_IN_INDEX = 98,
    SQL_MAXIMUM_COLUMNS_IN_INDEX = SQL_MAX_COLUMNS_IN_INDEX,
    SQL_MAX_COLUMNS_IN_ORDER_BY = 99,
    SQL_MAXIMUM_COLUMNS_IN_ORDER_BY = SQL_MAX_COLUMNS_IN_ORDER_BY,
    SQL_MAX_COLUMNS_IN_SELECT = 100,
    SQL_MAXIMUM_COLUMNS_IN_SELECT = SQL_MAX_COLUMNS_IN_SELECT,
    SQL_MAX_COLUMNS_IN_TABLE = 101,
    SQL_MAXIMUM_COLUMNS_IN_TABLE = SQL_MAX_COLUMNS_IN_TABLE,
    SQL_MAX_INDEX_SIZE = 102,
    SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103,
    SQL_MAXIMUM_ROW_SIZE_INCLUDES_LONG = SQL_MAX_ROW_SIZE_INCLUDES_LONG,
    SQL_MAXIMUM_INDEX_SIZE = SQL_MAX_INDEX_SIZE,
    SQL_MAX_ROW_SIZE = 104,
    SQL_MAXIMUM_ROW_SIZE = SQL_MAX_ROW_SIZE,
    SQL_MAX_STATEMENT_LEN = 105,
    SQL_MAXIMUM_STATEMENT_LENGTH = SQL_MAX_STATEMENT_LEN,
    SQL_MAX_TABLES_IN_SELECT = 106,
    SQL_MAXIMUM_TABLES_IN_SELECT = SQL_MAX_TABLES_IN_SELECT,
    SQL_MAX_USER_NAME_LEN = 107,
    SQL_MAXIMUM_USER_NAME_LENGTH = SQL_MAX_USER_NAME_LEN,
    SQL_MAX_CHAR_LITERAL_LEN = 108,
    SQL_MAXIMUM_CHAR_LITERAL_LENGTH = SQL_MAX_CHAR_LITERAL_LEN,
    SQL_TIMEDATE_ADD_INTERVALS = 109,
    SQL_TIMEDATE_DIFF_INTERVALS = 110,
    SQL_NEED_LONG_DATA_LEN = 111,
    SQL_MAX_BINARY_LITERAL_LEN = 112,
    SQL_LIKE_ESCAPE_CLAUSE = 113,
    SQL_QUALIFIER_LOCATION = 114,
    SQL_OJ_CAPABILITIES = 115,
    SQL_OUTER_JOIN_CAPABILITIES = SQL_OJ_CAPABILITIES,
    SQL_ACTIVE_ENVIRONMENTS = 116,
    SQL_ALTER_DOMAIN = 117,
    SQL_SQL_CONFORMANCE = 118,
    SQL_DATETIME_LITERALS = 119,
    SQL_BATCH_ROW_COUNT = 120,
    SQL_BATCH_SUPPORT = 121,
    SQL_CATALOG_LOCATION = SQL_QUALIFIER_LOCATION,
    SQL_CATALOG_NAME_SEPARATOR = SQL_QUALIFIER_NAME_SEPARATOR,
    SQL_CATALOG_TERM = SQL_QUALIFIER_TERM,
    SQL_CATALOG_USAGE = SQL_QUALIFIER_USAGE,
    SQL_CONVERT_WCHAR = 122,
    SQL_CONVERT_INTERVAL_DAY_TIME = 123,
    SQL_CONVERT_INTERVAL_YEAR_MONTH = 124,
    SQL_CONVERT_WLONGVARCHAR = 125,
    SQL_CONVERT_WVARCHAR = 126,
    SQL_CREATE_ASSERTION = 127,
    SQL_CREATE_CHARACTER_SET = 128,
    SQL_CREATE_COLLATION = 129,
    SQL_CREATE_DOMAIN = 130,
    SQL_CREATE_SCHEMA = 131,
    SQL_CREATE_TABLE = 132,
    SQL_CREATE_TRANSLATION = 133,
    SQL_CREATE_VIEW = 134,
    SQL_DRIVER_HDESC = 135,
    SQL_DROP_ASSERTION = 136,
    SQL_DROP_CHARACTER_SET = 137,
    SQL_DROP_COLLATION = 138,
    SQL_DROP_DOMAIN = 139,
    SQL_DROP_SCHEMA = 140,
    SQL_DROP_TABLE = 141,
    SQL_DROP_TRANSLATION = 142,
    SQL_DROP_VIEW = 143,
    SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144,
    SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145,
    SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146,
    SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147,
    SQL_INDEX_KEYWORDS = 148,
    SQL_INFO_SCHEMA_VIEWS = 149,
    SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150,
    SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151,
    SQL_ODBC_INTERFACE_CONFORMANCE = 152,
    SQL_PARAM_ARRAY_ROW_COUNTS = 153,
    SQL_PARAM_ARRAY_SELECTS = 154,
    SQL_SCHEMA_TERM = SQL_OWNER_TERM,
    SQL_SCHEMA_USAGE = SQL_OWNER_USAGE,
    SQL_SQL92_DATETIME_FUNCTIONS = 155,
    SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156,
    SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157,
    SQL_SQL92_GRANT = 158,
    SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159,
    SQL_SQL92_PREDICATES = 160,
    SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161,
    SQL_SQL92_REVOKE = 162,
    SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163,
    SQL_SQL92_STRING_FUNCTIONS = 164,
    SQL_SQL92_VALUE_EXPRESSIONS = 165,
    SQL_STANDARD_CLI_CONFORMANCE = 166,
    SQL_STATIC_CURSOR_ATTRIBUTES1 = 167,
    SQL_STATIC_CURSOR_ATTRIBUTES2 = 168,
    SQL_AGGREGATE_FUNCTIONS = 169,
    SQL_DDL_INDEX = 170,
    SQL_DM_VER = 171,
    SQL_INSERT_STATEMENT = 172,
    SQL_CONVERT_GUID = 173,
    SQL_UNION_STATEMENT = SQL_UNION,
    SQL_XOPEN_CLI_YEAR = 10000,
    SQL_CURSOR_SENSITIVITY = 10001,
    SQL_DESCRIBE_PARAMETER = 10002,
    SQL_CATALOG_NAME = 10003,
    SQL_COLLATION_SEQ = 10004,
    SQL_MAX_IDENTIFIER_LEN = 10005,
    SQL_MAXIMUM_IDENTIFIER_LENGTH = SQL_MAX_IDENTIFIER_LEN,
    SQL_ASYNC_MODE = 10021,
    SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022,
}

//SQL_ALTER_TABLE bitmasks
enum SQL_AT_ADD_COLUMN = 0x00000001L;
enum SQL_AT_DROP_COLUMN = 0x00000002L;
enum SQL_AT_ADD_CONSTRAINT = 0x00000008L;
enum SQL_AT_COLUMN_SINGLE = 0x00000020L;
enum SQL_AT_ADD_COLUMN_DEFAULT = 0x00000040L;
enum SQL_AT_ADD_COLUMN_COLLATION = 0x00000080L;
enum SQL_AT_SET_COLUMN_DEFAULT = 0x00000100L;
enum SQL_AT_DROP_COLUMN_DEFAULT = 0x00000200L;
enum SQL_AT_DROP_COLUMN_CASCADE = 0x00000400L;
enum SQL_AT_DROP_COLUMN_RESTRICT = 0x00000800L;
enum SQL_AT_ADD_TABLE_CONSTRAINT = 0x00001000L;
enum SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = 0x00002000L;
enum SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = 0x00004000L;
enum SQL_AT_CONSTRAINT_NAME_DEFINITION = 0x00008000L;
enum SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = 0x00010000L;
enum SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = 0x00020000L;
enum SQL_AT_CONSTRAINT_DEFERRABLE = 0x00040000L;
enum SQL_AT_CONSTRAINT_NON_DEFERRABLE = 0x00080000L;


//SQLGetInfo - SQL_ASYNC_MODE
enum SQL_AM_NONE = 0;
enum SQL_AM_CONNECTION = 1;
enum SQL_AM_STATEMENT = 2;

//SQLGetInfo - SQL_CURSOR_COMMIT_BEHAVIOR
enum SQL_CB_DELETE = 0;
enum SQL_CB_CLOSE = 1;
enum SQL_CB_PRESERVE = 2;

//SQLGetInfo - SQL_FETCH_DIRECTION
enum int SQL_FD_FETCH_NEXT = 0x00000001L;
enum int SQL_FD_FETCH_FIRST = 0x00000002L;
enum int SQL_FD_FETCH_LAST = 0x00000004L;
enum int SQL_FD_FETCH_PRIOR = 0x00000008L;
enum int SQL_FD_FETCH_ABSOLUTE = 0x00000010L;
enum int SQL_FD_FETCH_RELATIVE = 0x00000020L;

//SQLGetInfo - SQL_GETDATA_EXTENSIONS
enum SQL_GD_ANY_COLUMN = 0x00000001L;
enum SQL_GD_ANY_ORDER = 0x00000002L;

//SQLGetInfo - SQL_IDENTIFIER_CASE
enum SQL_IC_UPPER = 1;
enum SQL_IC_LOWER = 2;
enum SQL_IC_SENSITIVE = 3;
enum SQL_IC_MIXED = 4;

//SQLGetInfo - SQL_NULL_COLLATION
enum SQL_NC_HIGH = 0;
enum SQL_NC_LOW = 1;

//SQLGetInfo - SQL_OJ_CAPABILITIES
enum uint SQL_OJ_LEFT = 0x00000001L;
enum uint SQL_OJ_RIGHT = 0x00000002L;
enum uint SQL_OJ_FULL = 0x00000004L;
enum uint SQL_OJ_NESTED = 0x00000008L;
enum uint SQL_OJ_NOT_ORDERED = 0x00000010L;
enum uint SQL_OJ_INNER = 0x00000020L;
enum uint SQL_OJ_ALL_COMPARISON_OPS = 0x00000040L;

//SQLGetInfo - SQL_SCROLL_CONCURRENCY
enum SQL_SCCO_READ_ONLY = 0x00000001L;
enum SQL_SCCO_LOCK = 0x00000002L;
enum SQL_SCCO_OPT_ROWVER = 0x00000004L;
enum SQL_SCCO_OPT_VALUES = 0x00000008L;

//SQLGetInfo - SQL_TXN_CAPABLE
enum SQL_TC_NONE = 0;
enum SQL_TC_DML = 1;
enum SQL_TC_ALL = 2;
enum SQL_TC_DDL_COMMIT = 3;
enum SQL_TC_DDL_IGNORE = 4;

//SQLGetInfo - SQL_TXN_ISOLATION_OPTION
enum SQL_TXN_READ_UNCOMMITTED = 0x00000001L;
enum SQL_TRANSACTION_READ_UNCOMMITTED = SQL_TXN_READ_UNCOMMITTED;
enum SQL_TXN_READ_COMMITTED = 0x00000002L;
enum SQL_TRANSACTION_READ_COMMITTED = SQL_TXN_READ_COMMITTED;
enum SQL_TXN_REPEATABLE_READ = 0x00000004L;
enum SQL_TRANSACTION_REPEATABLE_READ = SQL_TXN_REPEATABLE_READ;
enum SQL_TXN_SERIALIZABLE = 0x00000008L;
enum SQL_TRANSACTION_SERIALIZABLE = SQL_TXN_SERIALIZABLE;

//SQLGetStmtAttr - statement attributes
enum StatementAttribute : SQLINTEGER {
    SQL_ATTR_APP_ROW_DESC = 10010,
    SQL_ATTR_APP_PARAM_DESC = 10011,
    SQL_ATTR_IMP_ROW_DESC = 10012,
    SQL_ATTR_IMP_PARAM_DESC = 10013,
    SQL_ATTR_METADATA_ID = 10014,
    SQL_ATTR_CURSOR_SCROLLABLE = -1,
    SQL_ATTR_CURSOR_SENSITIVITY = -2,
    SQL_QUERY_TIMEOUT = 0,
    SQL_MAX_ROWS = 1,
    SQL_NOSCAN = 2,
    SQL_MAX_LENGTH = 3,
    SQL_ASYNC_ENABLE = 4,
    SQL_BIND_TYPE = 5,
    SQL_CURSOR_TYPE = 6,
    SQL_CONCURRENCY = 7,
    SQL_KEYSET_SIZE = 8,
    SQL_ROWSET_SIZE = 9,
    SQL_SIMULATE_CURSOR = 10,
    SQL_RETRIEVE_DATA = 11,
    SQL_USE_BOOKMARKS = 12,
    SQL_GET_BOOKMARK = 13,
    SQL_ROW_NUMBER = 14,
    SQL_ATTR_ASYNC_ENABLE = SQL_ASYNC_ENABLE,
    SQL_ATTR_CONCURRENCY = SQL_CONCURRENCY,
    SQL_ATTR_CURSOR_TYPE = SQL_CURSOR_TYPE,
    SQL_ATTR_ENABLE_AUTO_IPD = 15,
    SQL_ATTR_FETCH_BOOKMARK_PTR = 16,
    SQL_ATTR_KEYSET_SIZE = SQL_KEYSET_SIZE,
    SQL_ATTR_MAX_LENGTH = SQL_MAX_LENGTH,
    SQL_ATTR_MAX_ROWS = SQL_MAX_ROWS,
    SQL_ATTR_NOSCAN = SQL_NOSCAN,
    SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17,
    SQL_ATTR_PARAM_BIND_TYPE = 18,
    SQL_ATTR_PARAM_OPERATION_PTR = 19,
    SQL_ATTR_PARAM_STATUS_PTR = 20,
    SQL_ATTR_PARAMS_PROCESSED_PTR = 21,
    SQL_ATTR_PARAMSET_SIZE = 22,
    SQL_ATTR_QUERY_TIMEOUT = SQL_QUERY_TIMEOUT,
    SQL_ATTR_RETRIEVE_DATA = SQL_RETRIEVE_DATA,
    SQL_ATTR_ROW_BIND_OFFSET_PTR = 23,
    SQL_ATTR_ROW_BIND_TYPE = SQL_BIND_TYPE,
    SQL_ATTR_ROW_NUMBER = SQL_ROW_NUMBER,
    SQL_ATTR_ROW_OPERATION_PTR = 24,
    SQL_ATTR_ROW_STATUS_PTR = 25,
    SQL_ATTR_ROWS_FETCHED_PTR = 26,
    SQL_ATTR_ROW_ARRAY_SIZE = 27,
    SQL_ATTR_SIMULATE_CURSOR = SQL_SIMULATE_CURSOR,
    SQL_ATTR_USE_BOOKMARKS = SQL_USE_BOOKMARKS,
}

enum SQL_STMT_OPT_MAX = StatementAttribute.SQL_ROW_NUMBER;
enum SQL_STMT_OPT_MIN = StatementAttribute.SQL_QUERY_TIMEOUT;

//SQLGetStmtAttr - SQL_ATTR_CURSOR_SCROLLABLE
enum SQL_NONSCROLLABLE = 0;
enum SQL_SCROLLABLE = 1;

//SQLGetStmtAttr - SQL_ATTR_CURSOR_SENSITIVITY
enum SQL_UNSPECIFIED = 0;
enum SQL_INSENSITIVE = 1;
enum SQL_SENSITIVE = 2;

//SQLGetTypeInfo - SEARCHABLE
enum Searchable : SQLSMALLINT {
    SQL_PRED_NONE = 0,
    SQL_PRED_CHAR,
    SQL_PRED_BASIC,
    SQL_PRED_SEARCHABLE
}

//SQLSpecialColumns - Column scopes
enum SQL_SCOPE_CURROW = 0;
enum SQL_SCOPE_TRANSACTION = 1;
enum SQL_SCOPE_SESSION = 2;

//SQLSpecialColumns - PSEUDO_COLUMN
enum SQL_PC_UNKNOWN = 0;
enum SQL_PC_NON_PSEUDO = 1;
enum SQL_PC_PSEUDO = 2;

//SQLSpecialColumns - IdentifierType
enum SQL_ROW_IDENTIFIER = 1;

//SQLStatistics - fUnique
enum IndexType : SQLUSMALLINT {
    SQL_INDEX_UNIQUE = 0,
    SQL_INDEX_ALL
}

//SQLStatistics - TYPE
enum SQL_INDEX_CLUSTERED = 1;
enum SQL_INDEX_HASHED = 2;
enum SQL_INDEX_OTHER = 3;

//SQLTransact/SQLEndTran
enum TransactionOption : SQLSMALLINT {
    SQL_COMMIT = 0,
    SQL_ROLLBACK
}

extern(System):

SQLRETURN SQLAllocConnect(SQLHENV EnvironmentHandle, SQLHDBC* ConnectionHandle);

SQLRETURN SQLAllocEnv(SQLHENV* EnvironmentHandle);

SQLRETURN SQLAllocHandle(
    SQLSMALLINT HandleType,
    SQLHANDLE InputHandle,
    SQLHANDLE* OutputHandle);

SQLRETURN SQLAllocStmt(SQLHDBC ConnectionHandle, SQLHSTMT* StatementHandle);

SQLRETURN SQLBindCol(
    SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber,
    SQLSMALLINT TargetType, SQLPOINTER TargetValue,
    SQLLEN BufferLength, SQLLEN* StrLen_or_Ind);

SQLRETURN SQLBindParam(
    SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber,
    SQLSMALLINT ValueType, SQLSMALLINT ParameterType,
    SQLULEN LengthPrecision, SQLSMALLINT ParameterScale,
    SQLPOINTER ParameterValue, SQLLEN* StrLen_or_Ind);

SQLRETURN SQLCancel(SQLHSTMT StatementHandle);

SQLRETURN SQLCloseCursor(SQLHSTMT StatementHandle);

SQLRETURN SQLColAttribute (
    SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber,
    SQLUSMALLINT FieldIdentifier, SQLPOINTER CharacterAttribute,
    SQLSMALLINT BufferLength, SQLSMALLINT* StringLength,
    SQLLEN* NumericAttribute);

SQLRETURN SQLColumns(
    SQLHSTMT StatementHandle,
    SQLCHAR* CatalogName, SQLSMALLINT NameLength1,
    SQLCHAR* SchemaName, SQLSMALLINT NameLength2,
    SQLCHAR* TableName, SQLSMALLINT NameLength3,
    SQLCHAR* ColumnName, SQLSMALLINT NameLength4);

SQLRETURN SQLConnect(
    SQLHDBC ConnectionHandle,
    SQLCHAR* ServerName, SQLSMALLINT NameLength1,
    SQLCHAR* UserName, SQLSMALLINT NameLength2,
    SQLCHAR* Authentication, SQLSMALLINT NameLength3);

SQLRETURN SQLCopyDesc(SQLHDESC SourceDescHandle, SQLHDESC TargetDescHandle);

SQLRETURN SQLDataSources(
    SQLHENV EnvironmentHandle, SQLUSMALLINT Direction,
    SQLCHAR* ServerName, SQLSMALLINT BufferLength1,
    SQLSMALLINT* NameLength1, SQLCHAR* Description,
    SQLSMALLINT BufferLength2, SQLSMALLINT* NameLength2);

SQLRETURN SQLDescribeCol(
    SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber,
    SQLCHAR* ColumnName, SQLSMALLINT BufferLength,
    SQLSMALLINT* NameLength, SQLSMALLINT* DataType,
    SQLULEN* ColumnSize, SQLSMALLINT* DecimalDigits,
    SQLSMALLINT* Nullable);

SQLRETURN SQLDisconnect(SQLHDBC ConnectionHandle);

SQLRETURN SQLEndTran(
    SQLSMALLINT HandleType, SQLHANDLE Handle,
    SQLSMALLINT CompletionType);

SQLRETURN SQLError(
    SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle,
    SQLHSTMT StatementHandle, SQLCHAR* Sqlstate,
    SQLINTEGER* NativeError, SQLCHAR* MessageText,
    SQLSMALLINT BufferLength, SQLSMALLINT* TextLength);

SQLRETURN SQLExecDirect(
    SQLHSTMT StatementHandle,
    SQLCHAR* StatementText,
    SQLINTEGER TextLength);

SQLRETURN SQLExecute(SQLHSTMT StatementHandle);

SQLRETURN SQLFetch(SQLHSTMT StatementHandle);

SQLRETURN SQLFetchScroll(
    SQLHSTMT StatementHandle,
    SQLSMALLINT FetchOrientation,
    SQLLEN FetchOffset);

SQLRETURN SQLFreeConnect(SQLHDBC ConnectionHandle);

SQLRETURN SQLFreeEnv(SQLHENV EnvironmentHandle);

SQLRETURN SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle);

SQLRETURN SQLFreeStmt(SQLHSTMT StatementHandle, SQLUSMALLINT Option);

SQLRETURN SQLGetConnectAttr(
    SQLHDBC ConnectionHandle, SQLINTEGER Attribute,
    SQLPOINTER Value, SQLINTEGER BufferLength,
    SQLINTEGER* StringLength);

SQLRETURN SQLGetConnectOption(
    SQLHDBC ConnectionHandle, SQLUSMALLINT Option,
    SQLPOINTER Value);

SQLRETURN SQLGetCursorName(
    SQLHSTMT StatementHandle, SQLCHAR* CursorName,
    SQLSMALLINT BufferLength, SQLSMALLINT* NameLength);

SQLRETURN SQLGetData(
    SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber,
    SQLSMALLINT TargetType, SQLPOINTER TargetValue,
    SQLLEN BufferLength, SQLLEN* StrLen_or_Ind);

SQLRETURN SQLGetDescField(
    SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
    SQLSMALLINT FieldIdentifier, SQLPOINTER Value,
    SQLINTEGER BufferLength, SQLINTEGER* StringLength);

SQLRETURN SQLGetDescRec(
    SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
    SQLCHAR* Name, SQLSMALLINT BufferLength,
    SQLSMALLINT* StringLength, SQLSMALLINT* Type,
    SQLSMALLINT* SubType, SQLLEN * Length,
    SQLSMALLINT* Precision, SQLSMALLINT* Scale,
    SQLSMALLINT* Nullable);

SQLRETURN SQLGetDiagField(
    SQLSMALLINT HandleType, SQLHANDLE Handle,
    SQLSMALLINT RecNumber, SQLSMALLINT DiagIdentifier,
    SQLPOINTER DiagInfo, SQLSMALLINT BufferLength,
    SQLSMALLINT* StringLength);

SQLRETURN SQLGetDiagRec(
    SQLSMALLINT HandleType, SQLHANDLE Handle,
    SQLSMALLINT RecNumber, SQLCHAR* Sqlstate,
    SQLINTEGER* NativeError, SQLCHAR* MessageText,
    SQLSMALLINT BufferLength, SQLSMALLINT* TextLength);

SQLRETURN SQLGetEnvAttr(
    SQLHENV EnvironmentHandle, SQLINTEGER Attribute,
    SQLPOINTER Value, SQLINTEGER BufferLength,
    SQLINTEGER* StringLength);

SQLRETURN SQLGetFunctions(
    SQLHDBC ConnectionHandle,
    SQLUSMALLINT FunctionId,
    SQLUSMALLINT* Supported);

SQLRETURN SQLGetInfo(
    SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType,
    SQLPOINTER InfoValue, SQLSMALLINT BufferLength,
    SQLSMALLINT* StringLength);

SQLRETURN SQLGetStmtAttr(
    SQLHSTMT StatementHandle, SQLINTEGER Attribute,
    SQLPOINTER Value, SQLINTEGER BufferLength,
    SQLINTEGER* StringLength);

SQLRETURN SQLGetStmtOption(
    SQLHSTMT StatementHandle,
    SQLUSMALLINT Option,
    SQLPOINTER Value);

SQLRETURN SQLGetTypeInfo(SQLHSTMT StatementHandle, SQLSMALLINT DataType);

SQLRETURN SQLNumResultCols(SQLHSTMT StatementHandle, SQLSMALLINT* ColumnCount);

SQLRETURN SQLParamData(SQLHSTMT StatementHandle, SQLPOINTER* Value);

SQLRETURN SQLPrepare(
    SQLHSTMT StatementHandle,
    SQLCHAR* StatementText,
    SQLINTEGER TextLength);

SQLRETURN SQLPutData(
    SQLHSTMT StatementHandle,
    SQLPOINTER Data,
    SQLLEN StrLen_or_Ind);

SQLRETURN SQLRowCount(SQLHSTMT StatementHandle, SQLLEN* RowCount);

SQLRETURN SQLSetConnectAttr(
    SQLHDBC ConnectionHandle, SQLINTEGER Attribute,
    SQLPOINTER Value, SQLINTEGER StringLength);

SQLRETURN SQLSetConnectOption(
    SQLHDBC ConnectionHandle,
    SQLUSMALLINT Option,
    SQLULEN Value);

SQLRETURN SQLSetCursorName(
    SQLHSTMT StatementHandle,
    SQLCHAR* CursorName,
    SQLSMALLINT NameLength);

SQLRETURN SQLSetDescField(
    SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
    SQLSMALLINT FieldIdentifier, SQLPOINTER Value,
    SQLINTEGER BufferLength);

SQLRETURN SQLSetDescRec(
    SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
    SQLSMALLINT Type, SQLSMALLINT SubType,
    SQLLEN Length, SQLSMALLINT Precision,
    SQLSMALLINT Scale, SQLPOINTER Data,
    SQLLEN* StringLength, SQLLEN* Indicator);

SQLRETURN SQLSetEnvAttr(
    SQLHENV EnvironmentHandle, SQLINTEGER Attribute,
    SQLPOINTER Value, SQLINTEGER StringLength);

SQLRETURN SQLSetStmtAttr(
    SQLHSTMT StatementHandle, SQLINTEGER Attribute,
    SQLPOINTER Value, SQLINTEGER StringLength);

SQLRETURN SQLSetStmtOption(
    SQLHSTMT StatementHandle,
    SQLUSMALLINT Option,
    SQLULEN Value);

SQLRETURN SQLSpecialColumns(
    SQLHSTMT StatementHandle, SQLUSMALLINT IdentifierType,
    SQLCHAR* CatalogName, SQLSMALLINT NameLength1,
    SQLCHAR* SchemaName, SQLSMALLINT NameLength2,
    SQLCHAR* TableName, SQLSMALLINT NameLength3,
    SQLUSMALLINT Scope, SQLUSMALLINT Nullable);

SQLRETURN SQLStatistics(
    SQLHSTMT StatementHandle,
    SQLCHAR* CatalogName, SQLSMALLINT NameLength1,
    SQLCHAR* SchemaName, SQLSMALLINT NameLength2,
    SQLCHAR* TableName, SQLSMALLINT NameLength3,
    SQLUSMALLINT Unique, SQLUSMALLINT Reserved);

SQLRETURN SQLTables(
    SQLHSTMT StatementHandle,
    SQLCHAR* CatalogName, SQLSMALLINT NameLength1,
    SQLCHAR* SchemaName, SQLSMALLINT NameLength2,
    SQLCHAR* TableName, SQLSMALLINT NameLength3,
    SQLCHAR* TableType, SQLSMALLINT NameLength4);

SQLRETURN SQLTransact(
    SQLHENV EnvironmentHandle,
    SQLHDBC ConnectionHandle,
    SQLUSMALLINT CompletionType);

deprecated("ODBC 1.0 function - Use SQLBindParameter")
    SQLRETURN SQLSetParam(
        SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber,
        SQLSMALLINT ValueType, SQLSMALLINT ParameterType,
        SQLULEN LengthPrecision, SQLSMALLINT ParameterScale,
        SQLPOINTER ParameterValue, SQLLEN* StrLen_or_Ind);
